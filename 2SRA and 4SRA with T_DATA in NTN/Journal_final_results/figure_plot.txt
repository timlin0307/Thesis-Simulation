def figure_plot(nrow, ncol, figure_fontsize, legend_fontsize, plot_dotsize, legend_location, x_axis, 
                y_axis_ana_1, y_axis_ana_2, y_axis_ana_3, y_axis_ana_4, 
                y_axis_sim_1, y_axis_sim_2, y_axis_sim_3, y_axis_sim_4, 
                legend_text_1, legend_text_2, legend_text_3, legend_text_4):
    # err
    err_Ps_T = [[0.0] * int(len(x_axis)) for _ in range(0, 4)]
    err_Da_T = [[0.0] * int(len(x_axis)) for _ in range(0, 4)]
    err_Ur_PUSCH_T = [[0.0] * int(len(x_axis)) for _ in range(0, 4)]
    for r in range(0, len(x_axis)):
        if y_axis_ana_1 is None and y_axis_sim_1 is None:
            err_Ps_T[0][r] = 0.0
            err_Da_T[0][r] = 0.0
            err_Ur_PUSCH_T[0][r] = 0.0
        else:
            err_Ps_T[0][r] = error_rate(y_axis_ana_1.Ps_T[r], y_axis_sim_1.Ps_T[r])
            err_Da_T[0][r] = error_rate(y_axis_ana_1.Da_T[r], y_axis_sim_1.Da_T[r])
            # err_Ur_PUSCH_T[0][r] = error_rate(y_axis_ana_1.Ur_PUSCH_T[r], y_axis_sim_1.Ur_PUSCH_T[r])
            err_Ur_PUSCH_T[0][r] = error_rate(y_axis_ana_1.Ru_T[r], y_axis_sim_1.Ru_T[r])
        if y_axis_ana_2 is None and y_axis_sim_2 is None:
            err_Ps_T[1][r] = 0.0
            err_Da_T[1][r] = 0.0
            err_Ur_PUSCH_T[1][r] = 0.0
        else:
            err_Ps_T[1][r] = error_rate(y_axis_ana_2.Ps_T[r], y_axis_sim_2.Ps_T[r])
            err_Da_T[1][r] = error_rate(y_axis_ana_2.Da_T[r], y_axis_sim_2.Da_T[r])
            # err_Ur_PUSCH_T[1][r] = error_rate(y_axis_ana_2.Ur_PUSCH_T[r], y_axis_sim_2.Ur_PUSCH_T[r])
            err_Ur_PUSCH_T[1][r] = error_rate(y_axis_ana_2.Ru_T[r], y_axis_sim_2.Ru_T[r])
        if y_axis_ana_3 is None and y_axis_sim_3 is None:
            err_Ps_T[2][r] = 0.0
            err_Da_T[2][r] = 0.0
            err_Ur_PUSCH_T[2][r] = 0.0
        else:
            err_Ps_T[2][r] = error_rate(y_axis_ana_3.Ps_T[r], y_axis_sim_3.Ps_T[r])
            err_Da_T[2][r] = error_rate(y_axis_ana_3.Da_T[r], y_axis_sim_3.Da_T[r])
            # err_Ur_PUSCH_T[2][r] = error_rate(y_axis_ana_3.Ur_PUSCH_T[r], y_axis_sim_3.Ur_PUSCH_T[r])
            err_Ur_PUSCH_T[2][r] = error_rate(y_axis_ana_3.Ru_T[r], y_axis_sim_3.Ru_T[r])
        if y_axis_ana_4 is None and y_axis_sim_4 is None:
            err_Ps_T[3][r] = 0.0
            err_Da_T[3][r] = 0.0
            err_Ur_PUSCH_T[3][r] = 0.0
        else:
            err_Ps_T[3][r] = error_rate(y_axis_ana_4.Ps_T[r], y_axis_sim_4.Ps_T[r])
            err_Da_T[3][r] = error_rate(y_axis_ana_4.Da_T[r], y_axis_sim_4.Da_T[r])
            # err_Ur_PUSCH_T[3][r] = error_rate(y_axis_ana_4.Ur_PUSCH_T[r], y_axis_sim_4.Ur_PUSCH_T[r])
            err_Ur_PUSCH_T[3][r] = error_rate(y_axis_ana_4.Ru_T[r], y_axis_sim_4.Ru_T[r])
    # plot figure
    fig, ax1 = plt.subplots(nrows=nrow, ncols=ncol)
    for col in range(0, ncol):
        ax2 = ax1[col].twinx()
        # ana
        if y_axis_ana_1 is None:
            plot_1 = []
        else:
            if col == 0:
                plot_1 = ax1[col].plot(x_axis, y_axis_ana_1.Ps_T, '--', color = 'black', label = 'ana, ' + legend_text_1)
            elif col == 1:
                plot_1 = ax1[col].plot(x_axis, y_axis_ana_1.Da_T, '--', color = 'black', label = 'ana, ' + legend_text_1)
            elif col == 2:
                # plot_1 = ax1[col].plot(x_axis, y_axis_ana_1.Ur_PUSCH_T, '--', color = 'black', label = 'ana, ' + legend_text_1)
                plot_1 = ax1[col].plot(x_axis, y_axis_ana_1.Ru_T, '--', color = 'black', label = 'ana, ' + legend_text_1)
        if y_axis_ana_2 is None:
            plot_2 = []
        else:
            if col == 0:
                plot_2 = ax1[col].plot(x_axis, y_axis_ana_2.Ps_T, '-', color = 'blue', label = 'ana, ' + legend_text_2)
            elif col == 1:
                plot_2 = ax1[col].plot(x_axis, y_axis_ana_2.Da_T, '-', color = 'blue', label = 'ana, ' + legend_text_2)
            elif col == 2:
                # plot_2 = ax1[col].plot(x_axis, y_axis_ana_2.Ur_PUSCH_T, '-', color = 'blue', label = 'ana, ' + legend_text_2)
                plot_2 = ax1[col].plot(x_axis, y_axis_ana_2.Ru_T, '-', color = 'blue', label = 'ana, ' + legend_text_2)
        if y_axis_ana_3 is None:
            plot_3 = []
        else:
            if col == 0:
                plot_3 = ax1[col].plot(x_axis, y_axis_ana_3.Ps_T, '-.', color = 'red', label = 'ana, ' + legend_text_3)
            elif col == 1:
                plot_3 = ax1[col].plot(x_axis, y_axis_ana_3.Da_T, '-.', color = 'red', label = 'ana, ' + legend_text_3)
            elif col == 2:
                # plot_3 = ax1[col].plot(x_axis, y_axis_ana_3.Ur_PUSCH_T, '-.', color = 'red', label = 'ana, ' + legend_text_3)
                plot_3 = ax1[col].plot(x_axis, y_axis_ana_3.Ru_T, '-.', color = 'red', label = 'ana, ' + legend_text_3)
        if y_axis_ana_4 is None:
            plot_4 = []
        else:
            if col == 0:
                plot_4 = ax1[col].plot(x_axis, y_axis_ana_4.Ps_T, ':', color = 'darkorange', label = 'ana, ' + legend_text_4)
            elif col == 1:
                plot_4 = ax1[col].plot(x_axis, y_axis_ana_4.Da_T, ':', color = 'darkorange', label = 'ana, ' + legend_text_4)
            elif col == 2:
                # plot_4 = ax1[col].plot(x_axis, y_axis_ana_4.Ur_PUSCH_T, ':', color = 'darkorange', label = 'ana, ' + legend_text_4)
                plot_4 = ax1[col].plot(x_axis, y_axis_ana_4.Ru_T, ':', color = 'darkorange', label = 'ana, ' + legend_text_4) 
        # sim
        if y_axis_sim_1 is None:
            plot_5 = []
        else:
            if col == 0:
                plot_5 = ax1[col].plot(x_axis, y_axis_sim_1.Ps_T, '1', ms = plot_dotsize, color = 'black', label = 'sim, ' + legend_text_1)
            elif col == 1:
                plot_5 = ax1[col].plot(x_axis, y_axis_sim_1.Da_T, '1', ms = plot_dotsize, color = 'black', label = 'sim, ' + legend_text_1)
            elif col == 2:
                # plot_5 = ax1[col].plot(x_axis, y_axis_sim_1.Ur_PUSCH_T, '1', ms = plot_dotsize, color = 'black', label = 'sim, ' + legend_text_1)
                plot_5 = ax1[col].plot(x_axis, y_axis_sim_1.Ru_T, '1', ms = plot_dotsize, color = 'black', label = 'sim, ' + legend_text_1)
        if y_axis_sim_2 is None:
            plot_6 = []
        else:
            if col == 0:
                plot_6 = ax1[col].plot(x_axis, y_axis_sim_2.Ps_T, '2', ms = plot_dotsize, color = 'blue', label = 'sim, ' + legend_text_2)
            elif col == 1:
                plot_6 = ax1[col].plot(x_axis, y_axis_sim_2.Da_T, '2', ms = plot_dotsize, color = 'blue', label = 'sim, ' + legend_text_2)
            elif col == 2:
                # plot_6 = ax1[col].plot(x_axis, y_axis_sim_2.Ur_PUSCH_T, '2', ms = plot_dotsize, color = 'blue', label = 'sim, ' + legend_text_2)
                plot_6 = ax1[col].plot(x_axis, y_axis_sim_2.Ru_T, '2', ms = plot_dotsize, color = 'blue', label = 'sim, ' + legend_text_2)
        if y_axis_sim_3 is None:
            plot_7 = []
        else:
            if col == 0:
                plot_7 = ax1[col].plot(x_axis, y_axis_sim_3.Ps_T, '3', ms = plot_dotsize, color = 'red', label = 'sim, ' + legend_text_3)
            elif col == 1:
                plot_7 = ax1[col].plot(x_axis, y_axis_sim_3.Da_T, '3', ms = plot_dotsize, color = 'red', label = 'sim, ' + legend_text_3)
            elif col == 2:
                # plot_7 = ax1[col].plot(x_axis, y_axis_sim_3.Ur_PUSCH_T, '3', ms = plot_dotsize, color = 'red', label = 'sim, ' + legend_text_3)
                plot_7 = ax1[col].plot(x_axis, y_axis_sim_3.Ru_T, '3', ms = plot_dotsize, color = 'red', label = 'sim, ' + legend_text_3)
        if y_axis_sim_4 is None:
            plot_8 = []
        else:
            if col == 0:
                plot_8 = ax1[col].plot(x_axis, y_axis_sim_4.Ps_T, '4', ms = plot_dotsize, color = 'darkorange', label = 'sim, ' + legend_text_4)
            elif col == 1:
                plot_8 = ax1[col].plot(x_axis, y_axis_sim_4.Da_T, '4', ms = plot_dotsize, color = 'darkorange', label = 'sim, ' + legend_text_4)
            elif col == 2:
                # plot_8 = ax1[col].plot(x_axis, y_axis_sim_4.Ur_PUSCH_T, '4', ms = plot_dotsize, color = 'darkorange', label = 'sim, ' + legend_text_4)
                plot_8 = ax1[col].plot(x_axis, y_axis_sim_4.Ru_T, '4', ms = plot_dotsize, color = 'darkorange', label = 'sim, ' + legend_text_4)
        # err
        if y_axis_ana_1 is None and y_axis_sim_1 is None:
            plot_9 = []
        else:
            if col == 0:
                plot_9 = ax2.plot(x_axis, err_Ps_T[0], '-o', markerfacecolor='none', color = 'green', label = 'err, ' + legend_text_1)
            elif col == 1:
                plot_9 = ax2.plot(x_axis, err_Da_T[0], '-o', markerfacecolor='none', color = 'green', label = 'err, ' + legend_text_1)
            elif col == 2:
                plot_9 = ax2.plot(x_axis, err_Ur_PUSCH_T[0], '-o', markerfacecolor='none', color = 'green', label = 'err, ' + legend_text_1)
        if y_axis_ana_2 is None and y_axis_sim_2 is None:
            plot_10 = []
        else:
            if col == 0:
                plot_10 = ax2.plot(x_axis, err_Ps_T[1], '-s', markerfacecolor='none', color = 'lightgreen', label = 'err, ' + legend_text_2)
            elif col == 1:
                plot_10 = ax2.plot(x_axis, err_Da_T[1], '-s', markerfacecolor='none', color = 'lightgreen', label = 'err, ' + legend_text_2)
            elif col == 2:
                plot_10 = ax2.plot(x_axis, err_Ur_PUSCH_T[1], '-s', markerfacecolor='none', color = 'lightgreen', label = 'err, ' + legend_text_2)
        if y_axis_ana_3 is None and y_axis_sim_3 is None:
            plot_11 = []
        else:
            if col == 0:
                plot_11 = ax2.plot(x_axis, err_Ps_T[2], '-p', markerfacecolor='none', color = 'limegreen', label = 'err, ' + legend_text_3)
            elif col == 1:
                plot_11 = ax2.plot(x_axis, err_Da_T[2], '-p', markerfacecolor='none', color = 'limegreen', label = 'err, ' + legend_text_3)
            elif col == 2:
                plot_11 = ax2.plot(x_axis, err_Ur_PUSCH_T[2], '-p', markerfacecolor='none', color = 'limegreen', label = 'err, ' + legend_text_3)
        if y_axis_ana_4 is None and y_axis_sim_4 is None:
            plot_12 = []
        else:
            if col == 0:
                plot_12 = ax2.plot(x_axis, err_Ps_T[3], '-v', markerfacecolor='none', color = 'yellowgreen', label = 'err, ' + legend_text_4)
            elif col == 1:
                plot_12 = ax2.plot(x_axis, err_Da_T[3], '-v', markerfacecolor='none', color = 'yellowgreen', label = 'err, ' + legend_text_4)
            elif col == 2:
                plot_12 = ax2.plot(x_axis, err_Ur_PUSCH_T[3], '-v', markerfacecolor='none', color = 'yellowgreen', label = 'err, ' + legend_text_4)
        
        plt.xscale('log')
        if col == 0:
            # ax1[col].set_xlabel("Arrival Rate of UEs ($\lambda$)", color='black', fontsize=figure_fontsize)
            ax1[col].set_xlabel("Total Number of UEs ($M_{T}$)", color='black', fontsize=figure_fontsize)
            ax1[col].set_ylabel("Total Successful Accessed Probability ($P_{s,T}$)", color='black', fontsize=figure_fontsize)
        elif col == 1:
            # ax1[col].set_xlabel("Arrival Rate of UEs ($\lambda$)", color='black', fontsize=figure_fontsize)
            ax1[col].set_xlabel("Total Number of UEs ($M_{T}$)", color='black', fontsize=figure_fontsize)
            ax1[col].set_ylabel("Total Average Successful Accessed Delay ($\overline{D_{a,T}}$)", color='black', fontsize=figure_fontsize)
            ax1[col].ticklabel_format(axis='y', style='sci', scilimits=(0, 0))
        elif col == 2:
            # ax1[col].set_xlabel("Arrival Rate of UEs ($\lambda$)", color='black', fontsize=figure_fontsize)
            ax1[col].set_xlabel("Total Number of UEs ($M_{T}$)", color='black', fontsize=figure_fontsize)
            ax1[col].set_ylabel("Total Use of PUSCH Resources ($R_{u,T}$)", color='black', fontsize=figure_fontsize)
            ax1[col].ticklabel_format(axis='y', style='sci', scilimits=(0, 3))
        ax2.set_ylabel("Error (%)", color='darkgreen', fontsize=figure_fontsize)
        ax2.set_ylim([0, 5])

        ax1[col].tick_params(axis='x', labelcolor='black', labelsize=figure_fontsize)
        ax1[col].tick_params(axis='y', labelcolor='black', labelsize=figure_fontsize)
        ax2.tick_params(axis='y', labelcolor='darkgreen', labelsize=figure_fontsize)

        plt.grid(True, which="both")
        lns = plot_1 + plot_2 + plot_3 + plot_4 + plot_5 + plot_6 + plot_7 + plot_8 + plot_9 + plot_10 + plot_11 + plot_12
        labels = [l.get_label() for l in lns]
        # if col == 1:
        if col != 0:
            plt.legend(lns, labels, markerscale=1, fontsize=legend_fontsize, loc="upper left", bbox_to_anchor=(0, 1))
        else:
            plt.legend(lns, labels, markerscale=1, fontsize=legend_fontsize, loc=legend_location, bbox_to_anchor=(1, 1))
    
    plt.suptitle("(a) $M_{T}$ versus $P_{s,T}$                                            (b) $M_{T}$ versus $\overline{D_{a,T}}$                                              (c) $M_{T}$ versus $R_{u,T}$", fontsize=18, x=0.5, y=0.0)
    plt.rcParams["figure.figsize"] = (20, 5)
    plt.subplots_adjust(left=0.1, bottom=0.1, right=0.9, top=0.9, wspace=0.3, hspace=0.3)
    plt.show()